<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

use App\Models\{{NombreModulo}};
use App\Http\Requests\{{NombreModulo}}Request;
use App\Services\{{NombreModulo}}Service;

class {{NombreModulo}}Controller extends Controller
{
    protected {{NombreModulo}}Service ${{nombreModuloSingular}}Service;

    public function __construct({{NombreModulo}}Service ${{nombreModuloSingular}}Service)
    {
        $this->{{nombreModuloSingular}}Service = ${{nombreModuloSingular}}Service;
    }

    /**
     * Muestra la lista de {{nombreModulo}}.
     */
    public function index(Request $request)
    {
        if ($request->ajax()) {
            $columns = [
                // Configuración de columnas DataTable
            ];

            $actionsConfig = [
                'edit' => true,
                'delete' => true,
            ];

            $filters = [];
            // Asume que el ID del proveedor se envía como parámetro en la solicitud AJAX
            // (ej. /proveedorescontactos?proveedor_id=123)
            if ($request->has('{{primaryKey}}') && !empty($request->input('{{primaryKey}}'))) {
                $filters['{{primaryKey}}'] = $request->input('{{primaryKey}}');
            } // else {
                // Opcional: Si no se proporciona proveedor_id, podrías devolver un error
                // o una tabla vacía para evitar mostrar todos los contactos.
                // return response()->json(['data' => []]); // Ejemplo: devolver vacío
                // Log::warning('Solicitud de DataTable para ProveedoresContactos sin proveedor_id.');
                // O simplemente permitir que muestre todo si esa es la lógica deseada (menos común para sub-tablas)
            // }

            return $this->{{nombreModuloSingular}}Service->getDataTable($columns, $actionsConfig, '{{nombreModuloMin}}', '{{primaryKey}}', $filters);
        }

        return view('modules.{{NombreModulo}}.index', ['canAdd' => true]);
    }

    /**
     * Almacena un nuevo {{nombreModuloSingular}}.
     */
    public function store({{NombreModulo}}Request $request)
    {
        $validated = $request->validated();

        try {
            ${{nombreModuloSingular}} = $this->{{nombreModuloSingular}}Service->create($validated);
            return response()->json([
                'success' => true,
                'message' => '{{NombreModulo}} guardado exitosamente.',
                '{{nombreModuloSingular}}' => ${{nombreModuloSingular}},
            ], 201);
        } catch (\Exception $e) {
            Log::error('Error al guardar {{nombreModuloSingular}}', ['error' => $e->getMessage()]);
            return response()->json([
                'success' => false,
                'message' => 'Error al guardar el {{nombreModuloSingular}}.',
            ], 500);
        }
    }

    /**
     * Muestra el {{nombreModuloSingular}} solicitado.
     */
    public function edit({{NombreModulo}} ${{nombreModelo}})
    {
        return response()->json(${{nombreModelo}});
    }

    /**
     * Actualiza el {{nombreModuloSingular}} especificado.
     */
    public function update({{NombreModulo}}Request $request, {{NombreModulo}} ${{nombreModelo}})
    {
        $validated = $request->validated();

        try {
            $this->{{nombreModuloSingular}}Service->update(${{nombreModelo}}, $validated);
            return response()->json([
                'success' => true,
                'message' => '{{NombreModulo}} actualizado correctamente.',
            ], 200);
        } catch (\Exception $e) {
            Log::error('Error al actualizar {{nombreModuloSingular}}', ['error' => $e->getMessage()]);
            return response()->json([
                'success' => false,
                'message' => 'Error al actualizar el {{nombreModuloSingular}}.',
            ], 500);
        }
    }

    /**
     * Elimina el {{nombreModuloSingular}} especificado.
     */
    public function destroy({{NombreModulo}} ${{nombreModelo}})
    {
        try {
            $this->{{nombreModuloSingular}}Service->delete(${{nombreModelo}});
            return response()->json([
                'success' => true,
                'message' => '{{NombreModulo}} eliminado correctamente.',
            ]);
        } catch (\Exception $e) {
            Log::error('Error al eliminar {{nombreModuloSingular}}', ['error' => $e->getMessage()]);
            return response()->json([
                'success' => false,
                'message' => 'Error al eliminar el {{nombreModuloSingular}}.',
            ], 500);
        }
    }
}